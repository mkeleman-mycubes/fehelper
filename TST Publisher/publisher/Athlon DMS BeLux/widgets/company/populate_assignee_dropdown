<script>
    (function () {
        var FE_current = FE['{{options.containerId}}'];
        var dropdownName = "{{widget.variables.dropdownName}}";
        var dropdownContainer = jQuery('#{{options.containerId}} #{{widget.variables.dropdownId}}');
        var dropdownEl = dropdownContainer.find('select');
        var currentAnswer = FE_current['storedAnswer_' + dropdownName] == null
            ? (FE_current.getAllOptions().initAnswers[dropdownName] || "")
            : FE_current['storedAnswer_' + dropdownName];
        var excludeMyself = "{{widget.variables.excludeMyself}}";
        var excludeAssignedTo = "{{widget.variables.excludeAssignedTo}}";
        var submitBtn = jQuery('#{{options.containerId}} .fe-btn-submit');
        var initAnswers = FE_current.getAllOptions().initAnswers;
        var taskName = FE_current.getAnswer({ questionName: "taskname" });
        var approverType = taskName === 'First Approval' ? 'approver1' : 'approver2';
        var assignTo = FE_current.getAnswer({ questionName: "assign_to" });

        if (typeof (assignTo) === "string" && assignTo.length < 1) {

            FE_current.setAnswer({
                questionName: 'assign_to',
                answer: initAnswers[approverType]
            });

            FE_current.setAnswer({
                questionName: 'current_approver1',
                answer: initAnswers['approver1']
            });

            FE_current.setAnswer({
                questionName: 'approverType',
                answer: approverType
            });


            FE_current.render();
        }

        if (dropdownEl) {
            FE_current.setAnswer({
                questionName: dropdownName,
                answer: currentAnswer
            });

            var changeFunc = dropdownEl[0].onchange;
            dropdownEl[0].onchange = null;

            dropdownEl.on('change', function () {
                var answer = dropdownEl.val();
                var allUsers = FE_current.getFormVariable({name: 'userList_'+dropdownName});
                if (allUsers && allUsers.usersOfGroup) {
                    var currUser = allUsers.usersOfGroup.filter(function(user) {
                        return user.id === answer;
                    });
                    
                    var firstName = currUser[0].firstName;
                    var lastName = currUser[0].lastName
                    
                    FE_current.setAnswer({questionName: dropdownName+"Label", answer: firstName + ' ' + lastName});
                    
                    var pre_approver = FE_current.getAnswer({questionName: 'pre_'+dropdownName});
                    if (pre_approver && pre_approver.length > 0) {
                        var pre_app_obj = allUsers.usersOfGroup.filter(function(user) {
                            return user.id === pre_approver;
                        });
                        if (pre_app_obj && pre_app_obj.length > 0) {
                            FE_current.setAnswer({questionName: "pre_"+dropdownName+"Label", answer: pre_app_obj[0].firstName + ' ' + pre_app_obj[0].lastName});
                        } else {
                            FE_current.setAnswer({questionName: "pre_"+dropdownName+"Label", answer: pre_approver});
                        }
                    }
                }
                
                if (approverType === dropdownName) {
                    FE_current.setAnswer({
                        questionName: 'assign_to',
                        answer: answer
                    });
                }
                FE_current['storedAnswer_' + dropdownName] = answer;
                changeFunc.call(dropdownEl[0]);
            });

            if (FE_current['usersData_' + dropdownName]) {
                return populateDropdown(FE_current['usersData_' + dropdownName]);
            }

            submitBtn.addClass('disabled');
            dropdownContainer.hide();

            FE_current.serviceCall({
              data: {
                name: "getADGroupsByType_piper",
                description: "{{widget.variables.groupIdVariable}}",
                entity: FE_current.getAnswer({ questionName: 'companyCode' })
              },
              success: function (groups) {
                if (groups && groups.length > 0) {
                  let groupId = groups[0].cd;

                  FE_current.serviceCall({
                      data: {
                          name: "getUsersOfGroup_piper",
                          groupId: groupId,
                          taskId: FE_current.getAnswer({ questionName: 'taskid' }),
                          taskName: FE_current.getAnswer({ questionName: 'taskname' }),
                          excludeMyself: !!excludeMyself,
                          excludeAssignedTo: !!excludeAssignedTo
                      },
                      success: function (users) {
                          if (users && users.usersOfGroup) {
                              FE_current.setFormVariable({name: 'userList_'+dropdownName, value: users});
                              FE_current['usersData_' + dropdownName] = users.usersOfGroup;

                              populateDropdown(users.usersOfGroup);

                              submitBtn.removeClass('disabled');
                              dropdownContainer.show();
                          }
                      }
                  });
                } else {
                    console.error('Can not retrieve users because of group absence')
                }
              }
            });

            
        }

        function populateDropdown(users) {
            var h = [];
            users.sort((first, second) => {
                const primary = first.firstName.toUpperCase(); // ignore upper and lowercase
                const secondary= second.firstName.toUpperCase(); // ignore upper and lowercase
                    if (primary < secondary) { 
                        return -1; 
                    } 
                    if (primary> secondary) {
                        return 1;
                    }
                        return 0;
            }); 
            users.forEach(function (user) {
                var selected = (currentAnswer === user.id) ? "selected" : "";
                h.push('<option value="' + user.id + '" ' + selected + '>' + user.firstName + ' ' + user.lastName + '</option>');
            });

            dropdownEl.append(h.join(''));
        }
    })();
</script>